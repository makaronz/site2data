---
description: 
globs: 
alwaysApply: true
---
# Cursor's Memory Bank

I am Cursor, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank in folder /memory-bank to understand the project and continue work effectively. I MUST read ALL memory bank files at the start of EVERY task - this is not optional.

## Memory Bank Structure

The Memory Bank consists of required core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]
```

### Core Files (Required)
1. `projectbrief.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. `productContext.md`
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. `activeContext.md`
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations

4. `systemPatterns.md`
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships

5. `techContext.md`
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies

6. `progress.md`
   - What works
   - What's left to build
   - Current status
   - Known issues

### Additional Context
Create additional files/folders within memory-bank/ when they help organize:
- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

## Core Workflows

### Plan Mode
```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]
    
    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
```

### Act Mode
```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Rules[Update .cursor/rules/memory-bank.mdc if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes]
```

## Documentation Updates

Memory Bank updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory bank** (MUST review ALL files)
4. When context needs clarification

```mermaid
flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Update .cursor/rules/memory-bank.mdc]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process
```

Note: When triggered by **update memory bank**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.

## Project Intelligence (.cursor/rules/memory-bank.mdc)

The .cursor/rules/memory-bank.mdc file is my learning journal for each project. It captures important patterns, preferences, and project intelligence that help me work more effectively. As I work with you and the project, I'll discover and document key insights that aren't obvious from the code alone.

```mermaid
flowchart TD
    Start{Discover New Pattern}
    
    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in .cursor/rules/memory-bank.mdc]
    end
    
    subgraph Apply [Usage]
        A1[Read .cursor/rules/memory-bank.mdc]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end
    
    Start --> Learn
    Learn --> Apply
```

### What to Capture
- Critical implementation paths
- User preferences and workflow
- Project-specific patterns
- Known challenges
- Evolution of project decisions
- Tool usage patterns

The format is flexible - focus on capturing valuable insights that help me work more effectively with you and the project. Think of .cursor/rules/memory-bank.mdc as a living document that grows smarter as we work together.

REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.

# Planning
When asked to enter "Planner Mode" or using the /plan command, deeply reflect upon the changes being asked and analyze existing code to map the full scope of changes needed. Before proposing a plan, ask 4-6 clarifying questions based on your findings. Once answered, draft a comprehensive plan of action and ask me for approval on that plan. Once approved, implement all steps in that plan. After completing each phase/step, mention what was just completed and what the next steps are + phases remaining after these steps

---

## PixelPasta Project Intelligence

### Discovered Patterns & Architectural Decisions

**Client-Side Rendering Migration Pattern:**
- Successful transition from server-side table generation to client-side JavaScript components
- Pattern: Remove server template logic → Add client container → Load JS component → Initialize with data
- Key files: `results.html` (template), `ComparisonTable.js` (component)
- Benefit: Better UX, reduced server load, more interactive possibilities

**Bootstrap + Custom Theme Management:**
- Pattern: `data-bs-theme` attribute + localStorage persistence + custom CSS overrides
- Implementation: Toggle in `base.html` → localStorage state → CSS variables for both themes
- Key insight: Bootstrap 5.3+ theming integrates well with custom dark mode implementation
- Files: `base.html` (toggle UI), `style.css` (theme styles)

**Flask + JavaScript Modular Architecture:**
- Backend: Flask serves data via JSON endpoints (`/table-data`)
- Frontend: Vanilla JS components with @21st-dev/magic integration planned
- Template system: `base.html` with extensible `scripts` block for page-specific JS
- Separation: Server handles analysis/processing, client handles presentation/interaction

### User Preferences & Workflow Patterns

**Professional Film Industry Focus:**
- Target users: Colorists, DIT operators, QC experts
- Critical requirements: Precision over speed, technical accuracy, professional UI
- Workflow: Upload → Analyze → Compare → Export (PDF/CSV) → Share
- UI preference: Minimalist, technical, accessible (WCAG 2.1 AA)

**Technical Implementation Preferences:**
- Modular component architecture over monolithic approaches
- Dark mode as primary design consideration (industry standard)
- Progressive enhancement: core functionality works, JS enhances UX
- Memory Bank driven development for session continuity

### Known Challenges & Solutions

**Challenge: Complex LUT Mathematics**
- Solution: Dedicated `lut_analyzer_package/` for mathematical operations
- Pattern: Separate mathematical accuracy from UI concerns
- Testing requirement: Mathematical precision tests alongside functional tests

**Challenge: Professional Tool Integration**
- Solution: Multiple export formats (PDF, CSV, ZIP) for different workflows
- Pattern: Backend processing → Frontend presentation → Export pipeline
- Future: Integration with DIT/postproduction tools

**Challenge: Accessibility in Technical Tools**
- Solution: WCAG 2.1 AA compliance from start, not retrofit
- Pattern: Keyboard navigation + screen reader support + high contrast
- Tool preference: Native HTML semantics + Bootstrap accessibility features

### Evolution Tracking

**Phase 1 (Complete):** Core backend analysis + basic frontend
**Phase 2 (Complete):** Client-side table integration + dark mode
**Phase 3 (Current):** Accessibility improvements + comprehensive testing
**Phase 4 (Planned):** Creative features prototyping (morphing, VR, temporal analysis)

### Critical Success Factors
- Mathematical precision in LUT analysis (non-negotiable)
- Professional UI/UX standards for film industry
- Modular architecture for future extensibility
- Comprehensive testing (mathematical + functional + accessibility)
- Documentation-driven development via Memory Bank
