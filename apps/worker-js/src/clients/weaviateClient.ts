import weaviate, { WeaviateClient, ObjectsBatcher, WeaviateClass } from 'weaviate-ts-client';
import dotenv from 'dotenv';
import { Logger } from 'pino';
import { Scene } from '../../packages/types/src'; // Import Scene type for properties

dotenv.config();

const WEAVIATE_URL = process.env.WEAVIATE_URL || 'http://localhost:8080';
const WEAVIATE_API_KEY = process.env.WEAVIATE_API_KEY; // Optional, for WCS or authenticated instances
const WEAVIATE_CLASS_NAME = 'Scene';

// Define the Weaviate schema for the Scene class
const sceneClassSchema: WeaviateClass = {
  class: WEAVIATE_CLASS_NAME,
  description: 'Stores information and analysis results about individual movie scenes',
  vectorizer: 'none', // Specify 'text2vec-openai' or others if using Weaviate vectorization modules
  // Consider module specific config like moduleConfig: { 'text2vec-openai': { vectorizer: 'text-embedding-ada-002' } }
  properties: [
    { name: 'jobId', dataType: ['text'], description: 'Identifier of the parent job' },
    { name: 'sceneId', dataType: ['text'], description: 'Unique identifier for the scene' },
    { name: 'sceneNumber', dataType: ['int'], description: 'Sequential number of the scene' },
    {
      name: 'sceneText',
      dataType: ['text'],
      description: 'Full text content of the scene',
      // Optional: skip indexing if text is very long and only used for retrieval via vector
      // indexFilterable: false,
      // indexSearchable: false,
    },
    {
      name: 'analysisTitle',
      dataType: ['text'],
      description: 'Title generated by LLM analysis',
      tokenization: 'word',
    },
    {
      name: 'analysisSummary',
      dataType: ['text'],
      description: 'Summary generated by LLM analysis',
      tokenization: 'word',
    },
    { name: 'characters', dataType: ['text[]'], description: 'Characters present in the scene' },
    { name: 'locations', dataType: ['text[]'], description: 'Locations mentioned in the scene' },
    // Add other searchable/filterable fields from analysisResult if needed
  ],
};

let weaviateClientInstance: WeaviateClient;

// Function to initialize Weaviate (accepts logger)
export async function initializeWeaviate(logger: Logger): Promise<WeaviateClient> {
  if (weaviateClientInstance) {
    logger.debug('Weaviate client already initialized.');
    return weaviateClientInstance;
  }

  logger.info(`Connecting to Weaviate at ${WEAVIATE_URL}...`);
  const clientConfig: any = { scheme: 'http', host: WEAVIATE_URL.replace(/^https? P:\/\//, '') };
  if (WEAVIATE_URL.startsWith('https')) {
      clientConfig.scheme = 'https';
  }
  if (WEAVIATE_API_KEY) {
    clientConfig.apiKey = new weaviate.ApiKey(WEAVIATE_API_KEY);
  }

  const client = weaviate.client(clientConfig);

  try {
    // Check connection and schema
    const meta = await client.misc.metaGetter().do();
    logger.info(`Connected to Weaviate v${meta.version} at ${meta.hostname}`);

    // Ensure schema exists
    const schemas = await client.schema.getter().do();
    const sceneClassExists = schemas.classes?.some(c => c.class === WEAVIATE_CLASS_NAME);

    if (!sceneClassExists) {
      logger.info(`Weaviate class '${WEAVIATE_CLASS_NAME}' does not exist. Creating...`);
      await client.schema.classCreator().withClass(sceneClassSchema).do();
      logger.info(`Weaviate class '${WEAVIATE_CLASS_NAME}' created successfully.`);
    } else {
      logger.info(`Weaviate class '${WEAVIATE_CLASS_NAME}' already exists.`);
      // TODO: Optional: Compare existing schema with desired schema and update if necessary
    }

    weaviateClientInstance = client;
    logger.info('Weaviate client initialized and schema ensured.');
    return weaviateClientInstance;

  } catch (error) {
    logger.error({ error }, 'Failed to connect to or initialize Weaviate');
    throw error; // Re-throw for handling during startup
  }
}

// Export the client instance directly for use after initialization
export const getWeaviateClient = (): WeaviateClient => {
  if (!weaviateClientInstance) {
    throw new Error('Weaviate client has not been initialized.');
  }
  return weaviateClientInstance;
};

// Export class name constant
export { WEAVIATE_CLASS_NAME }; 